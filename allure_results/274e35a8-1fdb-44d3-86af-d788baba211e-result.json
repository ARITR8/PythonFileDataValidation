{"name": "test_e2e_workflow[MemberDataProfile-./data/input/members2.txt-./data/expected/expected_data2.csv-./data/output/extracted_data2.csv-output/extracted_data2.csv]", "status": "failed", "statusDetails": {"message": "AssertionError: Data validation should pass\nassert False\n +  where False = validate_extracted_data('./data/output/extracted_data2.csv', './data/expected/expected_data2.csv')", "trace": "profile_name = 'MemberDataProfile', input_file = './data/input/members2.txt'\nexpected_file = './data/expected/expected_data2.csv'\noutput_file = './data/output/extracted_data2.csv'\ns3_key = 'output/extracted_data2.csv'\n\n    @pytest.mark.parametrize(\"profile_name, input_file, expected_file, output_file, s3_key\", [\n        (\"MemberDataProfile\", './data/input/members1.txt', './data/expected/expected_data1.csv', './data/output/extracted_data1.csv','output/extracted_data1.csv'),\n        (\"MemberDataProfile\", './data/input/members2.txt', './data/expected/expected_data2.csv', './data/output/extracted_data2.csv','output/extracted_data2.csv'),\n        # Add more cases as needed\n    ])\n    def test_e2e_workflow(profile_name, input_file, expected_file, output_file, s3_key):\n        attributes = read_profile_attributes(profile_name)\n        assert attributes is not None, \"Profile attributes should not be None\"\n    \n        intermediary_data = extract_data_from_flat_file(input_file, attributes)\n        assert len(intermediary_data) > 0, \"Extracted data should not be empty\"\n    \n        save_extracted_data(intermediary_data, output_file)\n    \n>       assert validate_extracted_data(output_file, expected_file), \"Data validation should pass\"\nE       AssertionError: Data validation should pass\nE       assert False\nE        +  where False = validate_extracted_data('./data/output/extracted_data2.csv', './data/expected/expected_data2.csv')\n\ntests\\test_DataExtraction_parallel.py:24: AssertionError"}, "parameters": [{"name": "profile_name", "value": "'MemberDataProfile'"}, {"name": "input_file", "value": "'./data/input/members2.txt'"}, {"name": "expected_file", "value": "'./data/expected/expected_data2.csv'"}, {"name": "output_file", "value": "'./data/output/extracted_data2.csv'"}, {"name": "s3_key", "value": "'output/extracted_data2.csv'"}], "start": 1738826351846, "stop": 1738826352259, "uuid": "91afbba1-9f6e-4dc9-a47a-e5eb7e6c7bea", "historyId": "2167b7417bf3e0500546e9b2968da41a", "testCaseId": "184cb5f448eeb901cdddb3f19070bf43", "fullName": "tests.test_DataExtraction_parallel#test_e2e_workflow", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_DataExtraction_parallel"}, {"name": "host", "value": "DESKTOP-NH8I41E"}, {"name": "thread", "value": "23668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_DataExtraction_parallel"}]}